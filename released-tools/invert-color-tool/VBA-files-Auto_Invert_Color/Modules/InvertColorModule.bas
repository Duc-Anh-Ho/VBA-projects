Attribute VB_Name = "InvertColorModule"
' AUTO INVERT COLOR
' Author: DANH
' Version: 2.0.0
' Update: 2022/10/11
' Check README.md for more information

Option Explicit

Private Const VERSION = "v1.1.0"
Private Const AUTHOR_PROMPT As String = "AUTHOR: "
Private Const AUTHOR_NAME As String = "DANH"
Private fileSystem As Object
Private userResponse As VbMsgBoxResult
Private app As Application
Private wb As Workbook
Private ws As Worksheet
Private targetRange As Range ' Object
Private redColor As Integer
Private greenColor As Integer
Private blueColor As Integer
    
Private Static Function initializeVariables() As Boolean
    'ThisWorkbook.Author = AUTHOR_NAME
    Set fileSystem = CreateObject("Scripting.FileSystemObject")
    Set app = Application
    If app.ActiveWorkbook Is Nothing Or app.ActiveSheet Is Nothing Then
        MsgBox _
            Prompt:=AUTHOR_PROMPT & _
                "Can not access file, please re-open!!", _
            Buttons:=vbOKOnly + vbExclamation, _
            Title:=AUTHOR_NAME
        initializeVariables = False
        Exit Function
    Else
        Set wb = app.ActiveWorkbook
        Set ws = wb.ActiveSheet
    End If
    If TypeName(Selection) = "Range" Then
'    If TypeName(Selection) = "ChartArea" Then
        Set targetRange = Selection
    Else
        MsgBox _
            Prompt:=AUTHOR_PROMPT & _
                "You only can invert range!", _
            Buttons:=vbOKOnly + vbExclamation, _
            Title:=AUTHOR_NAME
        initializeVariables = False
        Exit Function
    End If
    initializeVariables = True
End Function

Private Static Function getInvertColor(ByVal RGBColor As Long) As Long
     'Algorithm color
    Let redColor = 255 - RGBColor Mod 256
    Let greenColor = 255 - RGBColor \ 256 Mod 256
    Let blueColor = 255 - RGBColor \ 65536 Mod 256
    Let getInvertColor = RGB(redColor, greenColor, blueColor)
End Function

'MAIN
Public Static Sub invertColor()
    On Error GoTo ErrorHandle
    Application.ScreenUpdating = False
    If Not initializeVariables Then GoTo ExecuteProcedure
    Dim cell As Object
    'Loop to cell
    For Each cell In targetRange
        Let cell.Interior.Color = getInvertColor(cell.Interior.Color)
        Let cell.Font.Color = getInvertColor(cell.Font.Color)
        Let cell.Borders.Color = getInvertColor(cell.Borders.Color)
    Next cell
GoTo ExecuteProcedure
ErrorHandle:
    Call tackleErrors
ExecuteProcedure:
    Application.ScreenUpdating = True
End Sub

'Errors
Private Static Sub tackleErrors()
    Select Case Err.Number
        Case 0
        'VBA file have password
        Case 50289
            MsgBox _
                Prompt:=Err.Description & _
                    vbNewLine & _
                    AUTHOR_PROMPT & _
                    "Can not access this VBA file because of been protected by a password!", _
                Buttons:=vbCritical + vbOKOnly, _
                Title:=AUTHOR_NAME
        'Un-handled Error
        Case Else
            Call errorDisplay
    End Select
    Application.ScreenUpdating = True
    On Error GoTo 0
End Sub

Private Static Sub errorDisplay()
    Dim errorMessage As String: Let errorMessage = _
        "Error # " & Str(Err.Number) & _
        " was generated by " & Err.Source & _
        Chr(13) & "Error Line: " & Erl & _
        Chr(13) & Err.Description
    MsgBox _
        Prompt:=errorMessage, _
        Title:="Error", _
        HelpFile:=Err.HelpFile, _
        Context:=Err.HelpContext
End Sub
